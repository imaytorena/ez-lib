<?php

namespace App\Traits;

use App\Models\Permission;
use App\Models\Role;

trait HasPermissions
{
    // $role->givePermissionTo( "books", "1111" );
    // $role->givePermissionTo( 1, "1111" );
    public function givePermissionTo(string $permission, string $actions): static | null
    {
        $permissionEntity = $permission;
        if (gettype($permission) == "string") {
            $permissionEntity = Permission::where('name', $permission)->first();
        } else if (gettype($permission) == "integer") {
            $permissionEntity = Permission::find($permission);
        }

        $actionString = $actions;
        $permission_action = json_decode($permissionEntity->action);

        if (gettype($actions) == "array") {
            // This means is an array with format ['CREATE', 'READ']
            foreach ($permission_action as $idx => $action) {
                if (in_array($action, (array) $actions))
                    $actionString = substr_replace($actionString,'1',$idx,1);
            }
        }
        // String has been formatted '00111'
        if (strlen($actionString) < count($permission_action)) {

        }


        $this->permissions()->syncWithoutDetaching([$permissionEntity->id => ['active_actions' => $actionString]]);
        return $this;
    }

    // $user->assignRole("crud")
    public function assignRole(string $roleName, string $extinct = null): static
    {
        $role = Role::where('name', $roleName)->first();

        $this->roles()->syncWithoutDetaching([$role["id"] => ['extinct' => $extinct]]);

        return $this;
    }

    // $user->assignPermission("books", "1111", "01-05-2022")
    // $user->assignPermission("books", "1000")
    // $user->assignPermission("users", "1010")
    public function assignPermission(string $permissionId, string $extinct = null): static
    {
//        $role = SpecialPermission::create([
//            'name' => Str::random(10),
//            'description' => 'CUSTOM ROLE GENERATED BY BACKEND',
//            'extict' => $extinct
//        ]);

//        $role->permissions()->syncWithoutDetaching([$permissionId]);

//        $roleName = $role->name;
//        $this->assignRole($roleName);
        return $this;
    }
}
